ylab=" Aapproximate Test Error",
main =" Predicting Market Directions",pch=1)
lines(K, approx.error,lty=1)
?par
set.seed(1)
rows<- dim(diamonds)[1]
diam<- diamonds[sample(1:rows,1000),]
plot(log(diam$carat), log(diam$price), col=diam$cut)
legend("bottomright",legend=levels(diam$cut),fill = 1:length(levels(diam$cut)))
plot(1:5,1:5,col="red",pch=9)
plot(1:5,1:5,col=2,pch=19)
plot(1:5,1:5,col=1:5,pch=19)
legend("bottomright", legend = 1:5, fill=1:5)
abline(8,0,col="orange",lty=2)
lm1<- lm(log(diam$price)~log(diam$carat))
abline(lm1)
cuts<- levels(diam$cut)
col_counter<-1
for(i in cuts){
this_cut <- diam$cut==i
this_data<- diam[this_cut,]
this_lm<- lm(log(this_data$price)~log(this_data$carat))
abline(this_lm, col=col_counter)
col_counter=col_counter+1
}
diam$color2<- ifelse(diam$color=="D"|diam$color=="F","good","bad")
plot(log(diam$carat),log(diam$price),col=factor(diam$color2))
col_counter=1
for(i in factor(diam$color2)){
this_cut <- diam$color2==i
this_data<- diam[this_cut,]
this_lm<- lm(log(this_data$price)~log(this_data$carat))
abline(this_lm, col=col_counter)
col_counter=col_counter+1
}
points(-.4,6.8, pch="*", col="purple", cex=1.6)
locator()
text(-.4,6.8-.2,"New Diamond", cex=.5)
x<- c(.5,1,1.5,2,2.5,3,3.5,4)
y<- c(40,41,43,42,44,42,43,42)
mean(x)
var(x)
var(x)*8
var(y)
mean(x)/12*var(y)
1/8+mean(x)^2/12
1/12
sqrt(a/12)
a<-1/8+mean(x)^2/12
1/12
sqrt(a/12)
-0.291/sqrt(a/12)
-mean(x)/sqrt(12)/sqrt(1/8+mean(x)^2/12)
-mean(x)/12/sqrt(1/8+mean(x)^2/12)/sqrt(1/12)
var(x)*8
var(x)*7
v<-var(x)*7
-mean(x)/v/sqrt(1/8+mean(x)^2/v)/sqrt(1/v)
mean(y)
(y-mean(y))^2
sum((y-mean(y))^2)
var(y)
v
sum((x-mean(x))^2)
-mean(x)/v/sqrt(1/8+mean(x)^2/v)/sqrt(1/v)
beta1<- sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2)
beta0<- mean(y)-beta1*mean(x)
beta1
beta0
beta0+beta1*3.25
mean(x)
1+1/8+1/10.5
x<- c(13.1,15.3,25.8,1.8,4.9,55.4,39.3,26.7,47.5,6.6,94.7,61.1,135.6,47.6)
y<- c(27.3,42.4,38.7,4.5,23,166.3,109.7,80.1,150.7,10.3,189.7,131.3,404.2,149)
beta1<-sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2)
beta1
x<- c(13.1,15.3,25.8,1.8,4.9,55.4,39.3,26.7,47.5,6.6,94.7,61.1,135.6,47.6)
y<- c(27.3,42.4,38.7,4.5,23,166.3,109.7,80.1,150.7,10.3,189.7,131.3,404.2,149)
beta1<-sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2)
beta1
beta0<- mean(y)-beta1*mean(x)
beta0
beta0+beta1*21.4
length(x)
mean(x)
sum((x-mean(x))^2)
1+1/14+(21.4-mean(x))/sum((x-mean(x))^2)
Sy<- sum((y-mean(y))^2)
Sy/14
Sy/14*1.07036
x<- c(13.1,15.3,25.8,1.8,4.9,55.4,39.3,26.7,47.5,6.6,94.7,61.1,135.6,47.6)
y<- c(27.3,42.4,38.7,4.5,23,166.3,109.7,80.1,150.7,20.3,189.7,131.3,404.2,149)
beta1<-sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2)
beta1
beta0<- mean(y)-beta1*mean(x)
beta0
beta0+beta1*21.4
length(x)
mean(x)
sum((x-mean(x))^2)
x<-c(0.3,1.4,1, -0.3,-0.2,1,2,-1,-0.7,0.7)
y<-0.4,0.9,0.4,-0.3,0.3,0.8,0.7,-0.4,-0.2,0.7
y<-c(0.4,0.9,0.4,-0.3,0.3,0.8,0.7,-0.4,-0.2,0.7)
x<-c(0.3,1.4,1, -0.3,-0.2,1,2,-1,-0.7,0.7)
y<-c(0.4,0.9,0.4,-0.3,0.3,0.8,0.7,-0.4,-0.2,0.7)
beta1<-sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2)
beta1
beta0<- mean(y)-beta1*mean(x)
beta0
beta1<-sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2)
beta1
beta0<- mean(y)-beta1*mean(x)
beta0
beta0-0.7
lm(x,y)
lm(y~x)
a<-lm(y~x)
residuals(a)
r<-residuals(a)
sum(r^2)
sum(r^2)/8
s<-sum(r^2)/8
(1/10+mean(x)/sum((x-mean(x))^2))*s
sd<-(1/10+mean(x)/sum((x-mean(x))^2))*s
sqrt(sd)
0.553/sqrt(sd)
qt(0.925,8)
qt(0.975,8)
sum((x-mean(x))^2)
(1/10+mean(x)/sum((x-mean(x))^2))*s
sum(r^2)/8
sum(r^2)
sd<-(1/8+mean(x)/sum((x-mean(x))^2))*s
sqrt(sd)
0.553/sqrt(sd)
sd<-(1/10+mean(x)/sum((x-mean(x))^2))*s
sqrt(sd)
0.553/sqrt(sd)
(beta0-0.7)/sqrt(sd)
sd<-(1/10+mean(x)^2/sum((x-mean(x))^2))*s
sqrt(sd)
(beta0-0.7)/sqrt(sd)
p1<-(beta1-5*beta0)/sqrt(s)
p2<- sqrt(25/10+(-5*mean(x)-1)^2/sum((x-mean(x))^2))
p1*p2
qt(0.95,8)
p2<- (25/10+(-5*mean(x)-1)^2/sum((x-mean(x))^2))^(-1/2)
p1*p2
a<-c(810,820,820,835,835,835)
b<- c(840,840,840,845,855,850)
c<- c(785,790,785,760,760,770)
meana<-mean(a)
meanb<- mean(b)
meanc<- mean(c)
meant<- (meana+meanb+meanc)/3
mean<- c(meana,meanb,meanc)
sum((mean-meant)^2)
sum(sum((a-meana)^2)+sum((b-meanb)^2)+sum((c-meanc)^2))
sum((a-meant)^2+(b-meant)^2+(c-meant)^2)
sum((mean-meant)^2)*6
15702.78-17373.61
15702.78/2*25/1670.83
library(tm)
install.packages("tm")
library(tm)
install.packages("tm")
install.packages("tm")
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
# Get the file
folder.path="/Users/Keran/Documents/GitHub/Spring2018-Project1-keran0107/data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
# Tff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
# Inspect an overall wordcloud
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
dtm <- DocumentTermMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
ff.dtm=tidy(dtm)
ff.dtm
dtm
ff.all
install.packages("qdap")
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
# Get the file
folder.path="/Users/Keran/Documents/GitHub/Spring2018-Project1-keran0107/data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
# Tff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
# Inspect an overall wordcloud
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
dtm <- DocumentTermMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
ff.dtm=tidy(dtm)
library(shiny)
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('speech1', 'Speech 1',
speeches,
selected=speeches[5])),
column(4, selectInput('speech2', 'Speech 2', speeches,
selected=speeches[9])),
column(4, sliderInput('nwords', 'Number of words', 3,
min = 20, max = 200, value=100, step = 20))
),
fluidRow(
plotOutput('wordclouds', height = "400px")
)
),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
list(dtm.term1=ff.dtm$term[ff.dtm$document==as.character(input$speech1)],
dtm.count1=ff.dtm$count[ff.dtm$document==as.character(input$speech1)],
dtm.term2=ff.dtm$term[ff.dtm$document==as.character(input$speech2)],
dtm.count2=ff.dtm$count[ff.dtm$document==as.character(input$speech2)])
})
output$wordclouds <- renderPlot(height = 400, {
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(selectedData()$dtm.term1,
selectedData()$dtm.count1,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech1)
wordcloud(selectedData()$dtm.term2,
selectedData()$dtm.count2,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech2)
})
},
options = list(height = 600)
)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
# Get the file
folder.path="/Users/Keran/Documents/GitHub/Spring2018-Project1-keran0107/data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
# Tff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
# Inspect an overall wordcloud
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
dtm <- DocumentTermMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
ff.dtm=tidy(dtm)
library(shiny)
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('speech1', 'Speech 1',
speeches,
selected=speeches[5])),
column(4, selectInput('speech2', 'Speech 2', speeches,
selected=speeches[9])),
column(4, sliderInput('nwords', 'Number of words', 3,
min = 20, max = 200, value=100, step = 20))
),
fluidRow(
plotOutput('wordclouds', height = "400px")
)
),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
list(dtm.term1=ff.dtm$term[ff.dtm$document==as.character(input$speech1)],
dtm.count1=ff.dtm$count[ff.dtm$document==as.character(input$speech1)],
dtm.term2=ff.dtm$term[ff.dtm$document==as.character(input$speech2)],
dtm.count2=ff.dtm$count[ff.dtm$document==as.character(input$speech2)])
})
output$wordclouds <- renderPlot(height = 400, {
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(selectedData()$dtm.term1,
selectedData()$dtm.count1,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech1)
wordcloud(selectedData()$dtm.term2,
selectedData()$dtm.count2,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech2)
})
},
options = list(height = 600)
)
install.packages("tm")
install.packages("wordcloud")
install.packages("dplyr")
install.packages("tidypr")
install.packages("tidyr")
install.packages("purrr")
install.packages("readr")
install.packages("ggplot2")
install.packages("stringr")
library(dplyr)
library(tidyr)
library(purrr)
library(readr)
library(ggplot2)
library(stringr)
folder<- "/Users/Keran/Documents/GitHub/Spring2018-Project1-keran0107/data/InauguralSpeeches/"
# Define a function to read all files from a folder into a data frame
read_folder <- function(infolder) {
data_frame(file = dir(infolder, full.names = TRUE)) %>%
mutate(text = map(file, read_lines)) %>%
transmute(id = basename(file), text) %>%
unnest(text)
}
raw_text <- read_folder(folder)
dates<- read.csv("InauguationDates.txt",as.is = T, header = T, sep = "")
setwd("~/Documents/GitHub/Spring2018-Project1-keran0107/data")
folder<- "/Users/Keran/Documents/GitHub/Spring2018-Project1-keran0107/data/InauguralSpeeches/"
# Define a function to read all files from a folder into a data frame
read_folder <- function(infolder) {
data_frame(file = dir(infolder, full.names = TRUE)) %>%
mutate(text = map(file, read_lines)) %>%
transmute(id = basename(file), text) %>%
unnest(text)
}
raw_text <- read_folder(folder)
dates<- read.csv("InauguationDates.txt",as.is = T, header = T, sep = "")
info<- read.csv("InaugurationInfo.csv")
nrow(raw_text)
nrow(info)
info2<- info[order(info$President),]
raw_text<- cbind(raw_text,info2)
raw_text_order<-raw_text[order(as.numeric(rownames(raw_text))),]
colnames(raw_text_order)
raw_text_order %>%
group_by(Party) %>%
summarize(messages = n_distinct(id)) %>%
ggplot(aes(Party, messages)) +
geom_col() +
coord_flip()
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
# Get the file
folder.path="/Users/Keran/Documents/GitHub/Spring2018-Project1-keran0107/data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
# Tff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
# Inspect an overall wordcloud
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
dtm <- DocumentTermMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
ff.dtm=tidy(dtm)
library(shiny)
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('speech1', 'Speech 1',
speeches,
selected=speeches[5])),
column(4, selectInput('speech2', 'Speech 2', speeches,
selected=speeches[9])),
column(4, sliderInput('nwords', 'Number of words', 3,
min = 20, max = 200, value=100, step = 20))
),
fluidRow(
plotOutput('wordclouds', height = "400px")
)
),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
list(dtm.term1=ff.dtm$term[ff.dtm$document==as.character(input$speech1)],
dtm.count1=ff.dtm$count[ff.dtm$document==as.character(input$speech1)],
dtm.term2=ff.dtm$term[ff.dtm$document==as.character(input$speech2)],
dtm.count2=ff.dtm$count[ff.dtm$document==as.character(input$speech2)])
})
output$wordclouds <- renderPlot(height = 400, {
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(selectedData()$dtm.term1,
selectedData()$dtm.count1,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech1)
wordcloud(selectedData()$dtm.term2,
selectedData()$dtm.count2,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech2)
})
},
options = list(height = 600)
)
